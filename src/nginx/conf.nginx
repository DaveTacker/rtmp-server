user root;
# Auto-detect available CPU cores
worker_processes auto;
# Toggles auto-push (multi-worker live streaming) mode
rtmp_auto_push on;
# Sets auto-push reconnect timeout when worker is killed
rtmp_auto_push_reconnect 1s;
# Include the PATH in the NGINX environment
env PATH;
# debug, info, notice, warn, error, crit, alert, or emerg
error_log /dev/stderr debug;

events {
  worker_connections 1024;
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;

  server {
    location /stat {
      rtmp_stat all;
      rtmp_stat_stylesheet stat.xsl;
    }

    location /stat.xsl {
      alias /usr/local/nginx/html/stat.xsl;
    }

    location /players/ {
      autoindex on;
      autoindex_exact_size off;
      autoindex_format html;
      autoindex_localtime on;
      root /usr/local/nginx/html/;
    }

    # Serve HLS fragments
    location /hls {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }

      root /mnt/streams;
      add_header Cache-Control no-cache; # Disable cache
      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }

    # Serve DASH fragments
    location /dash {
      types {
        application/dash+xml mpd;
        video/mp4 mp4;
      }

      root /mnt/streams;
      add_header Cache-Control no-cache; # Disable cache
      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';

      # Allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }

    error_page 500 502 503 504 /50x.html;

    location = /50x.html {
      root html;
    }
  }
}

rtmp {
  access_log /dev/stdout;

  server {
    # Listen on standard RTMP port
    listen 1935;
    listen [::]:1935 ipv6only=on;
    chunk_size 4096;
    # only consume stream from localhost
    allow play 127.0.0.1;

    application live {
      live on;
      drop_idle_publisher 10s;
      # Only allow publishing from localhost
      allow publish 127.0.0.1;

      # Manual stream recording
      recorder rec1 {
        record manual;
        record_path /mnt/recordings/;
        record_unique on;
        record_interval 30s;
      }

      # For each received stream, transcode for adaptive streaming.
      # This single ffmpeg command takes the input and transforms the source into 4 different streams with different bitrates and qualities.
      # These settings respect the aspect ratio.
      exec_push ffmpeg -i rtmp://127.0.0.1:1935/$app/$name -async 1 -vsync -1 -c:v libx264 -c:a aac -b:v 256k -b:a 64k -vf "scale=480:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f
        flv rtmp://127.0.0.1:1935/show/$name_low -c:v libx264 -c:a aac -b:v 768k -b:a 128k -vf "scale=720:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv
        rtmp://127.0.0.1:1935/show/$name_mid -c:v libx264 -c:a aac -b:v 1024k -b:a 128k -vf "scale=960:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv
        rtmp://127.0.0.1:1935/show/$name_high -c:v libx264 -c:a aac -b:v 1920k -b:a 128k -vf "scale=1280:trunc(ow/a/2)*2" -tune zerolatency -preset superfast -crf 23 -f flv
        rtmp://127.0.0.1:1935/show/$name_hd720 -c copy -f flv rtmp://127.0.0.1:1935/show/$name_src 1>>/mnt/logs/$name.hls.log 2>>/mnt/logs/$name.hls-error.log;

      # Forward the injest to Facebook
      # push rtmp://127.0.0.1/facebook;
    }

    application facebook {
      live on;
      record off;
      exec_push ffmpeg -i rtmp://127.0.0.1:1935/live/$name -c:v copy -c:a copy -f flv rtmp://127.0.0.1:19350/app/$name 1>>/mnt/logs/facebook.$name.log 2>>/mnt/logs/facebook.error.$name.log;
    }

    # This is the HLS application
    application show {
      live on; # Allows live input from above application
      deny play all; # disable consuming the stream from nginx as rtmp
      # Turn on HLS
      hls on;
      hls_path /mnt/streams/hls/; # hls fragments path
      hls_fragment 3;
      hls_playlist_length 20;
      # Instruct clients to adjust resolution according to bandwidth
      hls_variant _src BANDWIDTH=4096000; # Source bitrate, source resolution
      hls_variant _hd720 BANDWIDTH=2048000; # High bitrate, HD 720p resolution
      hls_variant _high BANDWIDTH=1152000; # High bitrate, higher-than-SD resolution
      hls_variant _mid BANDWIDTH=448000; # Medium bitrate, SD resolution
      hls_variant _low BANDWIDTH=288000; # Low bitrate, sub-SD resolution
      # MPEG-DASH
      dash on;
      dash_path /mnt/streams/dash/; # dash fragments path
      dash_fragment 3;
      dash_playlist_length 20;
    }
  }
}
